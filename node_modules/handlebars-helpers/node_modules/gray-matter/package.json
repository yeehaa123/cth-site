{
  "name": "gray-matter",
  "description": "A simple to use YAML, JSON or Coffee Front-Matter parsing and extraction library, with options to set custom delimiters.",
  "version": "0.2.8",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/assemble/gray-matter.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/gray-matter/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "coffee-script": "~1.6.3",
    "delims": "~0.1.0",
    "fs-utils": "~0.1.6",
    "js-yaml": "~3.0.1",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "mocha": "~1.17.1"
  },
  "keywords": [
    "front-matter",
    "front matter",
    "frontmatter",
    "yaml front matter",
    "matter",
    "parse",
    "parser",
    "yfm",
    "JSON",
    "coffee",
    "coffee-script",
    "yaml"
  ],
  "readme": "# gray-matter [![NPM version](https://badge.fury.io/js/gray-matter.png)](http://badge.fury.io/js/gray-matter)\r\n\r\n> A simple-to-use Front-Matter parsing and extraction Library.\r\n\r\n* Use custom delimiters\r\n* Will extract and parse YAML, JSON, or CoffeeScript.\r\n* Easy to add additional parsers!\r\n\r\n## Quickstart\r\n\r\nInstall with [npm](npmjs.org)\r\n\r\n```bash\r\nnpm i gray-matter --save\r\n```\r\nInstall with [bower](https://github.com/bower/bower)\r\n\r\n```bash\r\nbower install gray-matter --save\r\n```\r\n\r\n<!-- toc -->\r\n* [Quickstart](#quickstart)\r\n* [Usage](#usage)\r\n* [Methods](#methods)\r\n  * [matter](#matter)\r\n  * [matter.read](#matterread)\r\n  * [matter.exists](#matterexists)\r\n  * [matter.extend](#matterextend)\r\n  * [matter.recontruct](#matterrecontruct)\r\n  * [matter.stringify](#matterstringify)\r\n  * [matter.stringifyYAML](#matterstringifyyaml)\r\n* [Options](#options)\r\n    * [lang](#lang)\r\n    * [delims](#delims)\r\n    * [autodetect](#autodetect)\r\n* [Examples](#examples)\r\n  * [matter](#matter)\r\n  * [matter.extend](#matterextend)\r\n* [Authors](#authors)\r\n* [License](#license)\r\n\r\n<!-- toc stop -->\r\n\r\n## Usage\r\n\r\n```js\r\nvar matter = require('gray-matter');\r\nmatter(String, Object);\r\n```\r\n\r\n## Methods\r\n\r\n### matter\r\n\r\nBy default the `matter()` method expects a string. So this:\r\n\r\n```js\r\nmatter(str);\r\n```\r\n\r\nresults in something like:\r\n\r\n```json\r\n{\r\n  \"context\": {\"foo\": \"bar\"},\r\n  \"content\": \"baz\",\r\n  \"original\": \"---\\nfoo: bar\\n---\\nbaz\"\r\n}\r\n```\r\n\r\n### matter.read\r\n\r\nRead a file from the file system before parsing.\r\n\r\n```js\r\nmatter.read('file.md');\r\n```\r\nReturns:\r\n\r\n```json\r\n{\r\n  \"context\": {\"foo\": \"bar\"},\r\n  \"content\": \"baz\",\r\n  \"original\": \"---\\nfoo: bar\\n---\\nbaz\"\r\n}\r\n```\r\n\r\n### matter.exists\r\n\r\nReturns `true` or `false` if front matter exists:\r\n\r\n```js\r\nmatter.exists(str);\r\n```\r\n\r\n### matter.extend\r\n\r\nExtend and stringify **YAML** front matter. Takes an object as the second parameter, and returns either the extended, stringified object (YAML), or if no front matter is found an empty string is returned.\r\n\r\n```js\r\nmatter.extend(str, obj);\r\n```\r\n\r\n### matter.recontruct\r\n\r\nA convenience wrapper around the `matter` and `matter.extend`. Extends YAML front matter, then re-assembles front matter with the content of the file.\r\n\r\n```js\r\nmatter.recontruct(str, obj);\r\n```\r\n\r\n### matter.stringify\r\n\r\nA convenience wrapper around the `matter(str).context` method.\r\n\r\n```js\r\nmatter.stringify(str);\r\n```\r\n\r\n\r\n### matter.stringifyYAML\r\n\r\nStringify parsed front matter back to YAML.\r\n\r\n```js\r\nmatter.stringifyYAML(str);\r\n```\r\n\r\n\r\n## Options\r\n\r\n> All methods will accept an options object to be passed as a second paramer\r\n\r\n#### lang\r\nType: `String`\r\n\r\nDefault: `yaml`\r\n\r\nThe parser to use on the extracted front matter. Valid options are, `yaml`, `coffee` and `json`.\r\n\r\n#### delims\r\nType: `Object`\r\n\r\nDefault: `{delims: ['---', '---']}`\r\n\r\nOpen and close delimiters can be passed in as an array of strings. Example:\r\n\r\n```js\r\nmatter.read('file.md', {delims: ['~~~', '~~~']});\r\n```\r\n\r\nYou may also pass an array of arrays, allowing multiple alternate delimiters to be used. Example:\r\n\r\n\r\n```js\r\n{\r\n  delims: [\r\n    ['---', '~~~'], ['---', '~~~']\r\n  ]\r\n}\r\n```\r\n_Note that passing multiple delimiters will yield unpredictable results, so it is recommended that you use this option only for testing purposes._\r\n\r\n#### autodetect\r\nType: `Boolean`\r\n\r\nDefault: `undefined`\r\n\r\nAttempts to automatically register a language that is specified after the first code boundary (delimiter).\r\n\r\nUsage Example:\r\n\r\n```coffee\r\n--- coffee\r\nuser = 'jonschlinkert'\r\nreverse = (src) ->\r\n  src.split('').reverse().join('')\r\n---\r\n{%= user %}\r\n{%= reverse(user) %}\r\n```\r\n\r\n## Examples\r\n\r\n### matter\r\n\r\nLet's say our page, `foo.html` contains\r\n\r\n```html\r\n---\r\ntitle: YAML Front matter\r\ndescription: This is a page\r\n---\r\n<h1>{{title}}</h1>\r\n```\r\n\r\nthen running the following in the command line:\r\n\r\n```js\r\nconsole.log(matter('foo.html'));\r\n```\r\nreturns\r\n\r\n```json\r\n{\r\n  \"context\": {\r\n    \"title\": \"YAML Front matter\",\r\n    \"description\": \"This is a page\"\r\n  },\r\n  \"content\": \"<h1>{{title}}</h1>\",\r\n  \"original\": \"---\\ntitle: YAML Front matter\\n---\\n<h1>{{title}}</h1>\"\r\n}\r\n```\r\nand\r\n\r\n```js\r\nconsole.log(matter('foo.html').context);\r\n```\r\nreturns\r\n\r\n\r\n```json\r\n{\"title\": \"YAML Front matter\", \"description\": \"This is a page\"}\r\n```\r\n\r\n### matter.extend\r\n\r\nGiven this page:\r\n\r\n```html\r\n---\r\ntitle: Gray Matter\r\n---\r\nHooray!\r\n```\r\nand this config:\r\n\r\n```js\r\nvar file = require('fs').readFileSync('file.md', 'utf8');\r\nvar obj = {\r\n  description: 'A simple to use front matter lib';\r\n};\r\nmatter.extend(file, obj);\r\n```\r\n\r\nthe result would be:\r\n\r\n```html\r\n---\r\ntitle: Gray Matter\r\ndescription: A simple to use front matter lib\r\n---\r\nHooray!\r\n```\r\n\r\n\r\n\r\n## Authors\r\n\r\n**Jon Schlinkert**\r\n\r\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\r\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n**Brian Woodward**\r\n\r\n+ [github/doowb](https://github.com/doowb)\r\n+ [twitter/doowb](http://twitter.com/jonschlinkert)\r\n\r\n\r\n## License\r\nCopyright (c) 2014 Jon Schlinkert, Brian Woodward, contributors.\r\nReleased under the MIT license\r\n\r\n***\r\n\r\n_This file was generated by [grunt-readme](https://github.com/assemble/grunt-readme) on Monday, January 27, 2014._\r\n\r\n[grunt]: http://gruntjs.com/\r\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\r\n[package.json]: https://npmjs.org/doc/json.html\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/assemble/gray-matter/issues"
  },
  "homepage": "https://github.com/assemble/gray-matter",
  "_id": "gray-matter@0.2.8",
  "_from": "gray-matter@~0.2.8"
}
